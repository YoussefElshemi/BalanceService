// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250913112606_AccountHistoryTrigger")]
    partial class AccountHistoryTrigger
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Infrastructure.Entities.AccountEntity", b =>
                {
                    b.Property<Guid>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("AccountStatusId")
                        .HasColumnType("integer");

                    b.Property<int>("AccountTypeId")
                        .HasColumnType("integer");

                    b.Property<decimal>("AvailableBalance")
                        .HasColumnType("numeric");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<decimal>("HoldBalance")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal>("LedgerBalance")
                        .HasColumnType("numeric");

                    b.Property<string>("Metadata")
                        .HasColumnType("jsonb");

                    b.Property<decimal>("MinimumRequiredBalance")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("ParentAccountId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("PendingBalance")
                        .HasColumnType("numeric");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AccountId");

                    b.HasIndex("AccountStatusId");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("ParentAccountId");

                    b.ToTable("Accounts", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Entities.AccountHistoryEntity", b =>
                {
                    b.Property<Guid>("AccountHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("AccountStatusId")
                        .HasColumnType("integer");

                    b.Property<int>("AccountTypeId")
                        .HasColumnType("integer");

                    b.Property<decimal>("AvailableBalance")
                        .HasColumnType("numeric");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<int>("HistoryTypeId")
                        .HasColumnType("integer");

                    b.Property<decimal>("HoldBalance")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal>("LedgerBalance")
                        .HasColumnType("numeric");

                    b.Property<string>("Metadata")
                        .HasColumnType("jsonb");

                    b.Property<decimal>("MinimumRequiredBalance")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("ParentAccountId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("PendingBalance")
                        .HasColumnType("numeric");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AccountHistoryId");

                    b.HasIndex("AccountId");

                    b.HasIndex("AccountStatusId");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("HistoryTypeId");

                    b.HasIndex("ParentAccountId");

                    b.ToTable("AccountHistory", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Entities.AccountStatusEntity", b =>
                {
                    b.Property<int>("AccountStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AccountStatusId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AccountStatusId");

                    b.ToTable("AccountStatuses", (string)null);

                    b.HasData(
                        new
                        {
                            AccountStatusId = 1,
                            Name = "Active"
                        },
                        new
                        {
                            AccountStatusId = 2,
                            Name = "Frozen"
                        },
                        new
                        {
                            AccountStatusId = 3,
                            Name = "Closed"
                        },
                        new
                        {
                            AccountStatusId = 4,
                            Name = "PendingActivation"
                        },
                        new
                        {
                            AccountStatusId = 5,
                            Name = "Dormant"
                        },
                        new
                        {
                            AccountStatusId = 6,
                            Name = "Suspended"
                        },
                        new
                        {
                            AccountStatusId = 7,
                            Name = "Restricted"
                        },
                        new
                        {
                            AccountStatusId = 8,
                            Name = "PendingClosure"
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.AccountTypeEntity", b =>
                {
                    b.Property<int>("AccountTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AccountTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AccountTypeId");

                    b.ToTable("AccountTypes", (string)null);

                    b.HasData(
                        new
                        {
                            AccountTypeId = 1,
                            Name = "Asset"
                        },
                        new
                        {
                            AccountTypeId = 2,
                            Name = "Liability"
                        },
                        new
                        {
                            AccountTypeId = 3,
                            Name = "Equity"
                        },
                        new
                        {
                            AccountTypeId = 4,
                            Name = "Revenue"
                        },
                        new
                        {
                            AccountTypeId = 5,
                            Name = "Expense"
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.HistoryTypeEntity", b =>
                {
                    b.Property<int>("HistoryTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("HistoryTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("HistoryTypeId");

                    b.ToTable("HistoryTypes", (string)null);

                    b.HasData(
                        new
                        {
                            HistoryTypeId = 1,
                            Name = "Insert"
                        },
                        new
                        {
                            HistoryTypeId = 2,
                            Name = "Modify"
                        },
                        new
                        {
                            HistoryTypeId = 3,
                            Name = "Delete"
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.HoldEntity", b =>
                {
                    b.Property<Guid>("HoldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("HoldSourceId")
                        .HasColumnType("integer");

                    b.Property<int>("HoldStatusId")
                        .HasColumnType("integer");

                    b.Property<int>("HoldTypeId")
                        .HasColumnType("integer");

                    b.Property<Guid>("IdempotencyKey")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Reference")
                        .HasColumnType("text");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<Guid?>("SettledTransactionId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("HoldId");

                    b.HasIndex("AccountId");

                    b.HasIndex("HoldSourceId");

                    b.HasIndex("HoldStatusId");

                    b.HasIndex("HoldTypeId");

                    b.HasIndex("IdempotencyKey")
                        .IsUnique();

                    b.HasIndex("SettledTransactionId")
                        .IsUnique();

                    b.ToTable("Holds", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Entities.HoldHistoryEntity", b =>
                {
                    b.Property<Guid>("HoldHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("HistoryTypeId")
                        .HasColumnType("integer");

                    b.Property<Guid>("HoldId")
                        .HasColumnType("uuid");

                    b.Property<int>("HoldSourceId")
                        .HasColumnType("integer");

                    b.Property<int>("HoldStatusId")
                        .HasColumnType("integer");

                    b.Property<int>("HoldTypeId")
                        .HasColumnType("integer");

                    b.Property<Guid>("IdempotencyKey")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Reference")
                        .HasColumnType("text");

                    b.Property<Guid?>("SettledTransactionId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("HoldHistoryId");

                    b.HasIndex("AccountId");

                    b.HasIndex("HistoryTypeId");

                    b.HasIndex("HoldId");

                    b.HasIndex("HoldSourceId");

                    b.HasIndex("HoldStatusId");

                    b.HasIndex("HoldTypeId");

                    b.HasIndex("SettledTransactionId")
                        .IsUnique();

                    b.ToTable("HoldHistory", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Entities.HoldSourceEntity", b =>
                {
                    b.Property<int>("HoldSourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("HoldSourceId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("HoldSourceId");

                    b.ToTable("HoldSources", (string)null);

                    b.HasData(
                        new
                        {
                            HoldSourceId = 1,
                            Name = "Api"
                        },
                        new
                        {
                            HoldSourceId = 2,
                            Name = "Import"
                        },
                        new
                        {
                            HoldSourceId = 3,
                            Name = "Manual"
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.HoldStatusEntity", b =>
                {
                    b.Property<int>("HoldStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("HoldStatusId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("HoldStatusId");

                    b.ToTable("HoldStatuses", (string)null);

                    b.HasData(
                        new
                        {
                            HoldStatusId = 1,
                            Name = "Active"
                        },
                        new
                        {
                            HoldStatusId = 2,
                            Name = "Released"
                        },
                        new
                        {
                            HoldStatusId = 3,
                            Name = "Settled"
                        },
                        new
                        {
                            HoldStatusId = 4,
                            Name = "Expired"
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.HoldTypeEntity", b =>
                {
                    b.Property<int>("HoldTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("HoldTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("HoldTypeId");

                    b.ToTable("HoldTypes", (string)null);

                    b.HasData(
                        new
                        {
                            HoldTypeId = 1,
                            Name = "CardAuthorization"
                        },
                        new
                        {
                            HoldTypeId = 2,
                            Name = "CheckDeposit"
                        },
                        new
                        {
                            HoldTypeId = 3,
                            Name = "Merchant"
                        },
                        new
                        {
                            HoldTypeId = 4,
                            Name = "Regulatory"
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.TransactionDirectionEntity", b =>
                {
                    b.Property<int>("TransactionDirectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TransactionDirectionId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TransactionDirectionId");

                    b.ToTable("TransactionDirections", (string)null);

                    b.HasData(
                        new
                        {
                            TransactionDirectionId = 1,
                            Name = "Credit"
                        },
                        new
                        {
                            TransactionDirectionId = 2,
                            Name = "Debit"
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.TransactionEntity", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("IdempotencyKey")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("PostedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Reference")
                        .HasColumnType("text");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<int>("TransactionDirectionId")
                        .HasColumnType("integer");

                    b.Property<int>("TransactionSourceId")
                        .HasColumnType("integer");

                    b.Property<int>("TransactionStatusId")
                        .HasColumnType("integer");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TransactionId");

                    b.HasIndex("AccountId");

                    b.HasIndex("IdempotencyKey")
                        .IsUnique();

                    b.HasIndex("TransactionDirectionId");

                    b.HasIndex("TransactionSourceId");

                    b.HasIndex("TransactionStatusId");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("Transactions", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Entities.TransactionHistoryEntity", b =>
                {
                    b.Property<Guid>("TransactionHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("HistoryTypeId")
                        .HasColumnType("integer");

                    b.Property<Guid>("IdempotencyKey")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("PostedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Reference")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TransactionDirectionId")
                        .HasColumnType("integer");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uuid");

                    b.Property<int>("TransactionSourceId")
                        .HasColumnType("integer");

                    b.Property<int>("TransactionStatusId")
                        .HasColumnType("integer");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TransactionHistoryId");

                    b.HasIndex("AccountId");

                    b.HasIndex("HistoryTypeId");

                    b.HasIndex("TransactionDirectionId");

                    b.HasIndex("TransactionId");

                    b.HasIndex("TransactionSourceId");

                    b.HasIndex("TransactionStatusId");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("TransactionHistory", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Entities.TransactionSourceEntity", b =>
                {
                    b.Property<int>("TransactionSourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TransactionSourceId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TransactionSourceId");

                    b.ToTable("TransactionSources", (string)null);

                    b.HasData(
                        new
                        {
                            TransactionSourceId = 1,
                            Name = "Api"
                        },
                        new
                        {
                            TransactionSourceId = 2,
                            Name = "Import"
                        },
                        new
                        {
                            TransactionSourceId = 3,
                            Name = "Manual"
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.TransactionStatusEntity", b =>
                {
                    b.Property<int>("TransactionStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TransactionStatusId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TransactionStatusId");

                    b.ToTable("TransactionStatuses", (string)null);

                    b.HasData(
                        new
                        {
                            TransactionStatusId = 1,
                            Name = "Draft"
                        },
                        new
                        {
                            TransactionStatusId = 2,
                            Name = "Posted"
                        },
                        new
                        {
                            TransactionStatusId = 3,
                            Name = "Reversed"
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.TransactionTypeEntity", b =>
                {
                    b.Property<int>("TransactionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TransactionTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TransactionTypeId");

                    b.ToTable("TransactionTypes", (string)null);

                    b.HasData(
                        new
                        {
                            TransactionTypeId = 1,
                            Name = "InboundFunds"
                        },
                        new
                        {
                            TransactionTypeId = 2,
                            Name = "SettledHold"
                        },
                        new
                        {
                            TransactionTypeId = 3,
                            Name = "Transfer"
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.AccountEntity", b =>
                {
                    b.HasOne("Infrastructure.Entities.AccountStatusEntity", "AccountStatusEntity")
                        .WithMany("AccountEntities")
                        .HasForeignKey("AccountStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.AccountTypeEntity", "AccountTypeEntity")
                        .WithMany("AccountEntities")
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.AccountEntity", "ParentAccountEntity")
                        .WithMany("ChildAccountEntities")
                        .HasForeignKey("ParentAccountId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AccountStatusEntity");

                    b.Navigation("AccountTypeEntity");

                    b.Navigation("ParentAccountEntity");
                });

            modelBuilder.Entity("Infrastructure.Entities.AccountHistoryEntity", b =>
                {
                    b.HasOne("Infrastructure.Entities.AccountStatusEntity", "AccountStatusEntity")
                        .WithMany()
                        .HasForeignKey("AccountStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.AccountTypeEntity", "AccountTypeEntity")
                        .WithMany()
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.HistoryTypeEntity", "HistoryTypeEntity")
                        .WithMany("AccountHistoryEntities")
                        .HasForeignKey("HistoryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.AccountEntity", "ParentAccountEntity")
                        .WithMany()
                        .HasForeignKey("ParentAccountId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AccountStatusEntity");

                    b.Navigation("AccountTypeEntity");

                    b.Navigation("HistoryTypeEntity");

                    b.Navigation("ParentAccountEntity");
                });

            modelBuilder.Entity("Infrastructure.Entities.HoldEntity", b =>
                {
                    b.HasOne("Infrastructure.Entities.AccountEntity", "AccountEntity")
                        .WithMany("HoldEntities")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.HoldSourceEntity", "HoldSourceEntity")
                        .WithMany("HoldEntities")
                        .HasForeignKey("HoldSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.HoldStatusEntity", "HoldStatusEntity")
                        .WithMany("HoldEntities")
                        .HasForeignKey("HoldStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.HoldTypeEntity", "HoldTypeEntity")
                        .WithMany("HoldEntities")
                        .HasForeignKey("HoldTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.TransactionEntity", "SettledTransactionEntity")
                        .WithOne()
                        .HasForeignKey("Infrastructure.Entities.HoldEntity", "SettledTransactionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AccountEntity");

                    b.Navigation("HoldSourceEntity");

                    b.Navigation("HoldStatusEntity");

                    b.Navigation("HoldTypeEntity");

                    b.Navigation("SettledTransactionEntity");
                });

            modelBuilder.Entity("Infrastructure.Entities.HoldHistoryEntity", b =>
                {
                    b.HasOne("Infrastructure.Entities.AccountEntity", "AccountEntity")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.HistoryTypeEntity", "HistoryTypeEntity")
                        .WithMany("HoldHistoryEntities")
                        .HasForeignKey("HistoryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.HoldSourceEntity", "HoldSourceEntity")
                        .WithMany()
                        .HasForeignKey("HoldSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.HoldStatusEntity", "HoldStatusEntity")
                        .WithMany()
                        .HasForeignKey("HoldStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.HoldTypeEntity", "HoldTypeEntity")
                        .WithMany()
                        .HasForeignKey("HoldTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.TransactionEntity", "SettledTransactionEntity")
                        .WithOne()
                        .HasForeignKey("Infrastructure.Entities.HoldHistoryEntity", "SettledTransactionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AccountEntity");

                    b.Navigation("HistoryTypeEntity");

                    b.Navigation("HoldSourceEntity");

                    b.Navigation("HoldStatusEntity");

                    b.Navigation("HoldTypeEntity");

                    b.Navigation("SettledTransactionEntity");
                });

            modelBuilder.Entity("Infrastructure.Entities.TransactionEntity", b =>
                {
                    b.HasOne("Infrastructure.Entities.AccountEntity", "AccountEntity")
                        .WithMany("TransactionEntities")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.TransactionDirectionEntity", "TransactionDirectionEntity")
                        .WithMany("TransactionEntities")
                        .HasForeignKey("TransactionDirectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.TransactionSourceEntity", "TransactionSourceEntity")
                        .WithMany("TransactionEntities")
                        .HasForeignKey("TransactionSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.TransactionStatusEntity", "TransactionStatusEntity")
                        .WithMany("TransactionEntities")
                        .HasForeignKey("TransactionStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.TransactionTypeEntity", "TransactionTypeEntity")
                        .WithMany("TransactionEntities")
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountEntity");

                    b.Navigation("TransactionDirectionEntity");

                    b.Navigation("TransactionSourceEntity");

                    b.Navigation("TransactionStatusEntity");

                    b.Navigation("TransactionTypeEntity");
                });

            modelBuilder.Entity("Infrastructure.Entities.TransactionHistoryEntity", b =>
                {
                    b.HasOne("Infrastructure.Entities.AccountEntity", "AccountEntity")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.HistoryTypeEntity", "HistoryTypeEntity")
                        .WithMany("TransactionHistoryEntities")
                        .HasForeignKey("HistoryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.TransactionDirectionEntity", "TransactionDirectionEntity")
                        .WithMany()
                        .HasForeignKey("TransactionDirectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.TransactionSourceEntity", "TransactionSourceEntity")
                        .WithMany()
                        .HasForeignKey("TransactionSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.TransactionStatusEntity", "TransactionStatusEntity")
                        .WithMany()
                        .HasForeignKey("TransactionStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.TransactionTypeEntity", "TransactionTypeEntity")
                        .WithMany()
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountEntity");

                    b.Navigation("HistoryTypeEntity");

                    b.Navigation("TransactionDirectionEntity");

                    b.Navigation("TransactionSourceEntity");

                    b.Navigation("TransactionStatusEntity");

                    b.Navigation("TransactionTypeEntity");
                });

            modelBuilder.Entity("Infrastructure.Entities.AccountEntity", b =>
                {
                    b.Navigation("ChildAccountEntities");

                    b.Navigation("HoldEntities");

                    b.Navigation("TransactionEntities");
                });

            modelBuilder.Entity("Infrastructure.Entities.AccountStatusEntity", b =>
                {
                    b.Navigation("AccountEntities");
                });

            modelBuilder.Entity("Infrastructure.Entities.AccountTypeEntity", b =>
                {
                    b.Navigation("AccountEntities");
                });

            modelBuilder.Entity("Infrastructure.Entities.HistoryTypeEntity", b =>
                {
                    b.Navigation("AccountHistoryEntities");

                    b.Navigation("HoldHistoryEntities");

                    b.Navigation("TransactionHistoryEntities");
                });

            modelBuilder.Entity("Infrastructure.Entities.HoldSourceEntity", b =>
                {
                    b.Navigation("HoldEntities");
                });

            modelBuilder.Entity("Infrastructure.Entities.HoldStatusEntity", b =>
                {
                    b.Navigation("HoldEntities");
                });

            modelBuilder.Entity("Infrastructure.Entities.HoldTypeEntity", b =>
                {
                    b.Navigation("HoldEntities");
                });

            modelBuilder.Entity("Infrastructure.Entities.TransactionDirectionEntity", b =>
                {
                    b.Navigation("TransactionEntities");
                });

            modelBuilder.Entity("Infrastructure.Entities.TransactionSourceEntity", b =>
                {
                    b.Navigation("TransactionEntities");
                });

            modelBuilder.Entity("Infrastructure.Entities.TransactionStatusEntity", b =>
                {
                    b.Navigation("TransactionEntities");
                });

            modelBuilder.Entity("Infrastructure.Entities.TransactionTypeEntity", b =>
                {
                    b.Navigation("TransactionEntities");
                });
#pragma warning restore 612, 618
        }
    }
}
