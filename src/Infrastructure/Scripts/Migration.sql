CREATE TABLE IF NOT EXISTS "__EFMigrationsHistory" (
    "MigrationId" character varying(150) NOT NULL,
    "ProductVersion" character varying(32) NOT NULL,
    CONSTRAINT "PK___EFMigrationsHistory" PRIMARY KEY ("MigrationId")
);

START TRANSACTION;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250908152845_Initial') THEN
    CREATE TABLE "AccountStatuses" (
        "AccountStatusId" integer GENERATED BY DEFAULT AS IDENTITY,
        "Name" text NOT NULL,
        CONSTRAINT "PK_AccountStatuses" PRIMARY KEY ("AccountStatusId")
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250908152845_Initial') THEN
    CREATE TABLE "AccountTypes" (
        "AccountTypeId" integer GENERATED BY DEFAULT AS IDENTITY,
        "Name" text NOT NULL,
        CONSTRAINT "PK_AccountTypes" PRIMARY KEY ("AccountTypeId")
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250908152845_Initial') THEN
    CREATE TABLE "HoldSources" (
        "HoldSourceId" integer GENERATED BY DEFAULT AS IDENTITY,
        "Name" text NOT NULL,
        CONSTRAINT "PK_HoldSources" PRIMARY KEY ("HoldSourceId")
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250908152845_Initial') THEN
    CREATE TABLE "HoldStatuses" (
        "HoldStatusId" integer GENERATED BY DEFAULT AS IDENTITY,
        "Name" text NOT NULL,
        CONSTRAINT "PK_HoldStatuses" PRIMARY KEY ("HoldStatusId")
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250908152845_Initial') THEN
    CREATE TABLE "HoldTypes" (
        "HoldTypeId" integer GENERATED BY DEFAULT AS IDENTITY,
        "Name" text NOT NULL,
        CONSTRAINT "PK_HoldTypes" PRIMARY KEY ("HoldTypeId")
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250908152845_Initial') THEN
    CREATE TABLE "TransactionDirections" (
        "TransactionDirectionId" integer GENERATED BY DEFAULT AS IDENTITY,
        "Name" text NOT NULL,
        CONSTRAINT "PK_TransactionDirections" PRIMARY KEY ("TransactionDirectionId")
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250908152845_Initial') THEN
    CREATE TABLE "TransactionSources" (
        "TransactionSourceId" integer GENERATED BY DEFAULT AS IDENTITY,
        "Name" text NOT NULL,
        CONSTRAINT "PK_TransactionSources" PRIMARY KEY ("TransactionSourceId")
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250908152845_Initial') THEN
    CREATE TABLE "TransactionStatuses" (
        "TransactionStatusId" integer GENERATED BY DEFAULT AS IDENTITY,
        "Name" text NOT NULL,
        CONSTRAINT "PK_TransactionStatuses" PRIMARY KEY ("TransactionStatusId")
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250908152845_Initial') THEN
    CREATE TABLE "TransactionTypes" (
        "TransactionTypeId" integer GENERATED BY DEFAULT AS IDENTITY,
        "Name" text NOT NULL,
        CONSTRAINT "PK_TransactionTypes" PRIMARY KEY ("TransactionTypeId")
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250908152845_Initial') THEN
    CREATE TABLE "Accounts" (
        "AccountId" uuid NOT NULL,
        "AccountName" text NOT NULL,
        "CurrencyCode" text NOT NULL,
        "LedgerBalance" numeric NOT NULL,
        "AvailableBalance" numeric NOT NULL,
        "PendingBalance" numeric NOT NULL,
        "HoldBalance" numeric NOT NULL,
        "MinimumRequiredBalance" numeric NOT NULL,
        "AccountTypeId" integer NOT NULL,
        "AccountStatusId" integer NOT NULL,
        "Metadata" jsonb,
        "ParentAccountId" uuid,
        "CreatedAt" timestamp with time zone NOT NULL,
        "CreatedBy" text NOT NULL,
        "UpdatedAt" timestamp with time zone NOT NULL,
        "UpdatedBy" text NOT NULL,
        "IsDeleted" boolean NOT NULL,
        "DeletedAt" timestamp with time zone,
        "DeletedBy" text,
        CONSTRAINT "PK_Accounts" PRIMARY KEY ("AccountId"),
        CONSTRAINT "FK_Accounts_AccountStatuses_AccountStatusId" FOREIGN KEY ("AccountStatusId") REFERENCES "AccountStatuses" ("AccountStatusId") ON DELETE CASCADE,
        CONSTRAINT "FK_Accounts_AccountTypes_AccountTypeId" FOREIGN KEY ("AccountTypeId") REFERENCES "AccountTypes" ("AccountTypeId") ON DELETE CASCADE,
        CONSTRAINT "FK_Accounts_Accounts_ParentAccountId" FOREIGN KEY ("ParentAccountId") REFERENCES "Accounts" ("AccountId") ON DELETE SET NULL
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250908152845_Initial') THEN
    CREATE TABLE "Transactions" (
        "TransactionId" uuid NOT NULL,
        "AccountId" uuid NOT NULL,
        "Amount" numeric NOT NULL,
        "CurrencyCode" text NOT NULL,
        "TransactionDirectionId" integer NOT NULL,
        "PostedDate" date,
        "IdempotencyKey" uuid NOT NULL,
        "TransactionTypeId" integer NOT NULL,
        "TransactionStatusId" integer NOT NULL,
        "TransactionSourceId" integer NOT NULL,
        "Description" text,
        "Reference" text,
        "CreatedAt" timestamp with time zone NOT NULL,
        "CreatedBy" text NOT NULL,
        "UpdatedAt" timestamp with time zone NOT NULL,
        "UpdatedBy" text NOT NULL,
        "IsDeleted" boolean NOT NULL,
        "DeletedAt" timestamp with time zone,
        "DeletedBy" text,
        CONSTRAINT "PK_Transactions" PRIMARY KEY ("TransactionId"),
        CONSTRAINT "FK_Transactions_Accounts_AccountId" FOREIGN KEY ("AccountId") REFERENCES "Accounts" ("AccountId") ON DELETE CASCADE,
        CONSTRAINT "FK_Transactions_TransactionDirections_TransactionDirectionId" FOREIGN KEY ("TransactionDirectionId") REFERENCES "TransactionDirections" ("TransactionDirectionId") ON DELETE CASCADE,
        CONSTRAINT "FK_Transactions_TransactionSources_TransactionSourceId" FOREIGN KEY ("TransactionSourceId") REFERENCES "TransactionSources" ("TransactionSourceId") ON DELETE CASCADE,
        CONSTRAINT "FK_Transactions_TransactionStatuses_TransactionStatusId" FOREIGN KEY ("TransactionStatusId") REFERENCES "TransactionStatuses" ("TransactionStatusId") ON DELETE CASCADE,
        CONSTRAINT "FK_Transactions_TransactionTypes_TransactionTypeId" FOREIGN KEY ("TransactionTypeId") REFERENCES "TransactionTypes" ("TransactionTypeId") ON DELETE CASCADE
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250908152845_Initial') THEN
    CREATE TABLE "Holds" (
        "HoldId" uuid NOT NULL,
        "AccountId" uuid NOT NULL,
        "Amount" numeric NOT NULL,
        "CurrencyCode" text NOT NULL,
        "IdempotencyKey" uuid NOT NULL,
        "HoldTypeId" integer NOT NULL,
        "HoldStatusId" integer NOT NULL,
        "HoldSourceId" integer NOT NULL,
        "SettledTransactionId" uuid,
        "ExpiresAt" timestamp with time zone,
        "Description" text,
        "Reference" text,
        "CreatedAt" timestamp with time zone NOT NULL,
        "CreatedBy" text NOT NULL,
        "UpdatedAt" timestamp with time zone NOT NULL,
        "UpdatedBy" text NOT NULL,
        "IsDeleted" boolean NOT NULL,
        "DeletedAt" timestamp with time zone,
        "DeletedBy" text,
        CONSTRAINT "PK_Holds" PRIMARY KEY ("HoldId"),
        CONSTRAINT "FK_Holds_Accounts_AccountId" FOREIGN KEY ("AccountId") REFERENCES "Accounts" ("AccountId") ON DELETE CASCADE,
        CONSTRAINT "FK_Holds_HoldSources_HoldSourceId" FOREIGN KEY ("HoldSourceId") REFERENCES "HoldSources" ("HoldSourceId") ON DELETE CASCADE,
        CONSTRAINT "FK_Holds_HoldStatuses_HoldStatusId" FOREIGN KEY ("HoldStatusId") REFERENCES "HoldStatuses" ("HoldStatusId") ON DELETE CASCADE,
        CONSTRAINT "FK_Holds_HoldTypes_HoldTypeId" FOREIGN KEY ("HoldTypeId") REFERENCES "HoldTypes" ("HoldTypeId") ON DELETE CASCADE,
        CONSTRAINT "FK_Holds_Transactions_SettledTransactionId" FOREIGN KEY ("SettledTransactionId") REFERENCES "Transactions" ("TransactionId") ON DELETE SET NULL
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250908152845_Initial') THEN
    INSERT INTO "AccountStatuses" ("AccountStatusId", "Name")
    VALUES (1, 'Active');
    INSERT INTO "AccountStatuses" ("AccountStatusId", "Name")
    VALUES (2, 'Frozen');
    INSERT INTO "AccountStatuses" ("AccountStatusId", "Name")
    VALUES (3, 'Closed');
    INSERT INTO "AccountStatuses" ("AccountStatusId", "Name")
    VALUES (4, 'PendingActivation');
    INSERT INTO "AccountStatuses" ("AccountStatusId", "Name")
    VALUES (5, 'Dormant');
    INSERT INTO "AccountStatuses" ("AccountStatusId", "Name")
    VALUES (6, 'Suspended');
    INSERT INTO "AccountStatuses" ("AccountStatusId", "Name")
    VALUES (7, 'Restricted');
    INSERT INTO "AccountStatuses" ("AccountStatusId", "Name")
    VALUES (8, 'PendingClosure');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250908152845_Initial') THEN
    INSERT INTO "AccountTypes" ("AccountTypeId", "Name")
    VALUES (1, 'Asset');
    INSERT INTO "AccountTypes" ("AccountTypeId", "Name")
    VALUES (2, 'Liability');
    INSERT INTO "AccountTypes" ("AccountTypeId", "Name")
    VALUES (3, 'Equity');
    INSERT INTO "AccountTypes" ("AccountTypeId", "Name")
    VALUES (4, 'Revenue');
    INSERT INTO "AccountTypes" ("AccountTypeId", "Name")
    VALUES (5, 'Expense');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250908152845_Initial') THEN
    INSERT INTO "HoldSources" ("HoldSourceId", "Name")
    VALUES (1, 'Api');
    INSERT INTO "HoldSources" ("HoldSourceId", "Name")
    VALUES (2, 'Import');
    INSERT INTO "HoldSources" ("HoldSourceId", "Name")
    VALUES (3, 'Manual');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250908152845_Initial') THEN
    INSERT INTO "HoldStatuses" ("HoldStatusId", "Name")
    VALUES (1, 'Active');
    INSERT INTO "HoldStatuses" ("HoldStatusId", "Name")
    VALUES (2, 'Released');
    INSERT INTO "HoldStatuses" ("HoldStatusId", "Name")
    VALUES (3, 'Settled');
    INSERT INTO "HoldStatuses" ("HoldStatusId", "Name")
    VALUES (4, 'Expired');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250908152845_Initial') THEN
    INSERT INTO "HoldTypes" ("HoldTypeId", "Name")
    VALUES (1, 'CardAuthorization');
    INSERT INTO "HoldTypes" ("HoldTypeId", "Name")
    VALUES (2, 'CheckDeposit');
    INSERT INTO "HoldTypes" ("HoldTypeId", "Name")
    VALUES (3, 'Merchant');
    INSERT INTO "HoldTypes" ("HoldTypeId", "Name")
    VALUES (4, 'Regulatory');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250908152845_Initial') THEN
    INSERT INTO "TransactionDirections" ("TransactionDirectionId", "Name")
    VALUES (1, 'Credit');
    INSERT INTO "TransactionDirections" ("TransactionDirectionId", "Name")
    VALUES (2, 'Debit');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250908152845_Initial') THEN
    INSERT INTO "TransactionSources" ("TransactionSourceId", "Name")
    VALUES (1, 'Api');
    INSERT INTO "TransactionSources" ("TransactionSourceId", "Name")
    VALUES (2, 'Import');
    INSERT INTO "TransactionSources" ("TransactionSourceId", "Name")
    VALUES (3, 'Manual');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250908152845_Initial') THEN
    INSERT INTO "TransactionStatuses" ("TransactionStatusId", "Name")
    VALUES (1, 'Draft');
    INSERT INTO "TransactionStatuses" ("TransactionStatusId", "Name")
    VALUES (2, 'Posted');
    INSERT INTO "TransactionStatuses" ("TransactionStatusId", "Name")
    VALUES (3, 'Reversed');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250908152845_Initial') THEN
    INSERT INTO "TransactionTypes" ("TransactionTypeId", "Name")
    VALUES (1, 'InboundFunds');
    INSERT INTO "TransactionTypes" ("TransactionTypeId", "Name")
    VALUES (2, 'SettledHold');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250908152845_Initial') THEN
    CREATE INDEX "IX_Accounts_AccountStatusId" ON "Accounts" ("AccountStatusId");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250908152845_Initial') THEN
    CREATE INDEX "IX_Accounts_AccountTypeId" ON "Accounts" ("AccountTypeId");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250908152845_Initial') THEN
    CREATE INDEX "IX_Accounts_ParentAccountId" ON "Accounts" ("ParentAccountId");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250908152845_Initial') THEN
    CREATE INDEX "IX_Holds_AccountId" ON "Holds" ("AccountId");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250908152845_Initial') THEN
    CREATE INDEX "IX_Holds_HoldSourceId" ON "Holds" ("HoldSourceId");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250908152845_Initial') THEN
    CREATE INDEX "IX_Holds_HoldStatusId" ON "Holds" ("HoldStatusId");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250908152845_Initial') THEN
    CREATE INDEX "IX_Holds_HoldTypeId" ON "Holds" ("HoldTypeId");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250908152845_Initial') THEN
    CREATE UNIQUE INDEX "IX_Holds_IdempotencyKey" ON "Holds" ("IdempotencyKey");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250908152845_Initial') THEN
    CREATE UNIQUE INDEX "IX_Holds_SettledTransactionId" ON "Holds" ("SettledTransactionId");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250908152845_Initial') THEN
    CREATE INDEX "IX_Transactions_AccountId" ON "Transactions" ("AccountId");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250908152845_Initial') THEN
    CREATE UNIQUE INDEX "IX_Transactions_IdempotencyKey" ON "Transactions" ("IdempotencyKey");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250908152845_Initial') THEN
    CREATE INDEX "IX_Transactions_TransactionDirectionId" ON "Transactions" ("TransactionDirectionId");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250908152845_Initial') THEN
    CREATE INDEX "IX_Transactions_TransactionSourceId" ON "Transactions" ("TransactionSourceId");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250908152845_Initial') THEN
    CREATE INDEX "IX_Transactions_TransactionStatusId" ON "Transactions" ("TransactionStatusId");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250908152845_Initial') THEN
    CREATE INDEX "IX_Transactions_TransactionTypeId" ON "Transactions" ("TransactionTypeId");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250908152845_Initial') THEN
    PERFORM setval(
        pg_get_serial_sequence('"AccountStatuses"', 'AccountStatusId'),
        GREATEST(
            (SELECT MAX("AccountStatusId") FROM "AccountStatuses") + 1,
            nextval(pg_get_serial_sequence('"AccountStatuses"', 'AccountStatusId'))),
        false);
    PERFORM setval(
        pg_get_serial_sequence('"AccountTypes"', 'AccountTypeId'),
        GREATEST(
            (SELECT MAX("AccountTypeId") FROM "AccountTypes") + 1,
            nextval(pg_get_serial_sequence('"AccountTypes"', 'AccountTypeId'))),
        false);
    PERFORM setval(
        pg_get_serial_sequence('"HoldSources"', 'HoldSourceId'),
        GREATEST(
            (SELECT MAX("HoldSourceId") FROM "HoldSources") + 1,
            nextval(pg_get_serial_sequence('"HoldSources"', 'HoldSourceId'))),
        false);
    PERFORM setval(
        pg_get_serial_sequence('"HoldStatuses"', 'HoldStatusId'),
        GREATEST(
            (SELECT MAX("HoldStatusId") FROM "HoldStatuses") + 1,
            nextval(pg_get_serial_sequence('"HoldStatuses"', 'HoldStatusId'))),
        false);
    PERFORM setval(
        pg_get_serial_sequence('"HoldTypes"', 'HoldTypeId'),
        GREATEST(
            (SELECT MAX("HoldTypeId") FROM "HoldTypes") + 1,
            nextval(pg_get_serial_sequence('"HoldTypes"', 'HoldTypeId'))),
        false);
    PERFORM setval(
        pg_get_serial_sequence('"TransactionDirections"', 'TransactionDirectionId'),
        GREATEST(
            (SELECT MAX("TransactionDirectionId") FROM "TransactionDirections") + 1,
            nextval(pg_get_serial_sequence('"TransactionDirections"', 'TransactionDirectionId'))),
        false);
    PERFORM setval(
        pg_get_serial_sequence('"TransactionSources"', 'TransactionSourceId'),
        GREATEST(
            (SELECT MAX("TransactionSourceId") FROM "TransactionSources") + 1,
            nextval(pg_get_serial_sequence('"TransactionSources"', 'TransactionSourceId'))),
        false);
    PERFORM setval(
        pg_get_serial_sequence('"TransactionStatuses"', 'TransactionStatusId'),
        GREATEST(
            (SELECT MAX("TransactionStatusId") FROM "TransactionStatuses") + 1,
            nextval(pg_get_serial_sequence('"TransactionStatuses"', 'TransactionStatusId'))),
        false);
    PERFORM setval(
        pg_get_serial_sequence('"TransactionTypes"', 'TransactionTypeId'),
        GREATEST(
            (SELECT MAX("TransactionTypeId") FROM "TransactionTypes") + 1,
            nextval(pg_get_serial_sequence('"TransactionTypes"', 'TransactionTypeId'))),
        false);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250908152845_Initial') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20250908152845_Initial', '9.0.8');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250908152949_AccountBalanceTrigger') THEN

                    create or replace function update_account_balance()
                    returns trigger as
                    $$
                    declare
                        old_amount numeric := (
                            case
                                when TG_OP <> 'INSERT' and old."TransactionDirectionId" = 1 then old."Amount"
                                when TG_OP <> 'INSERT' and old."TransactionDirectionId" = 2 then -old."Amount"
                                else 0
                            end
                        );
                        new_amount numeric := (
                            case
                                when TG_OP <> 'DELETE' and new."TransactionDirectionId" = 1 then new."Amount"
                                when TG_OP <> 'DELETE' and new."TransactionDirectionId" = 2 then -new."Amount"
                                else 0
                            end
                        );
                    begin
                        -- INSERT
                        if (TG_OP = 'INSERT') then
                            if (new."IsDeleted" = false) then
                                if (new."TransactionStatusId" = 1) then
                                    update "Accounts"
                                    set "PendingBalance" = "PendingBalance" + new_amount,
                                        "UpdatedBy" = new."UpdatedBy",
                                        "UpdatedAt" = new."UpdatedAt"
                                    where "AccountId" = new."AccountId";
                                elsif (new."TransactionStatusId" = 2) then
                                    update "Accounts"
                                    set "LedgerBalance" = "LedgerBalance" + new_amount,
                                        "AvailableBalance" = "AvailableBalance" + new_amount,
                                        "UpdatedBy" = new."UpdatedBy",
                                        "UpdatedAt" = new."UpdatedAt"
                                    where "AccountId" = new."AccountId";
                                end if;
                            end if;
                            return new;
                        end if;

                        -- UPDATE
                        if (TG_OP = 'UPDATE') then
                            -- AccountId changed
                            if (old."AccountId" <> new."AccountId") then
                                -- remove from old account
                                if (old."TransactionStatusId" = 1 and old."IsDeleted" = false) then
                                    update "Accounts"
                                    set "PendingBalance" = "PendingBalance" - old_amount,
                                        "UpdatedBy" = new."UpdatedBy",
                                        "UpdatedAt" = new."UpdatedAt"
                                    where "AccountId" = old."AccountId";
                                elsif (old."TransactionStatusId" = 2 and old."IsDeleted" = false) then
                                    update "Accounts"
                                    set "LedgerBalance" = "LedgerBalance" - old_amount,
                                        "AvailableBalance" = "AvailableBalance" - old_amount,
                                        "UpdatedBy" = new."UpdatedBy",
                                        "UpdatedAt" = new."UpdatedAt"
                                    where "AccountId" = old."AccountId";
                                end if;

                                -- add to new account
                                if (new."TransactionStatusId" = 1 and new."IsDeleted" = false) then
                                    update "Accounts"
                                    set "PendingBalance" = "PendingBalance" + new_amount,
                                        "UpdatedBy" = new."UpdatedBy",
                                        "UpdatedAt" = new."UpdatedAt"
                                    where "AccountId" = new."AccountId";
                                elsif (new."TransactionStatusId" = 2 and new."IsDeleted" = false) then
                                    update "Accounts"
                                    set "LedgerBalance" = "LedgerBalance" + new_amount,
                                        "AvailableBalance" = "AvailableBalance" + new_amount,
                                        "UpdatedBy" = new."UpdatedBy",
                                        "UpdatedAt" = new."UpdatedAt"
                                    where "AccountId" = new."AccountId";
                                end if;

                                return new;
                            end if;

                            -- Draft -> Posted
                            if (old."TransactionStatusId" = 1
                                and new."TransactionStatusId" = 2
                                and new."IsDeleted" = false) then
                                update "Accounts"
                                set "PendingBalance" = "PendingBalance" - old_amount,
                                    "LedgerBalance" = "LedgerBalance" + new_amount,
                                    "AvailableBalance" = "AvailableBalance" + new_amount,
                                        "UpdatedBy" = new."UpdatedBy",
                                        "UpdatedAt" = new."UpdatedAt"
                                where "AccountId" = new."AccountId";
                            end if;

                            -- Amount / Direction change
                            if (old."TransactionStatusId" = new."TransactionStatusId" 
                                and old."AccountId" = new."AccountId" 
                                and (old."Amount" <> new."Amount" 
                                     or old."TransactionDirectionId" <> new."TransactionDirectionId")
                                and new."IsDeleted" = false) then
                                if (new."TransactionStatusId" = 1) then
                                    update "Accounts"
                                    set "PendingBalance" = "PendingBalance" - old_amount + new_amount,
                                        "UpdatedBy" = new."UpdatedBy",
                                        "UpdatedAt" = new."UpdatedAt"
                                    where "AccountId" = new."AccountId";
                                elsif (new."TransactionStatusId" = 2) then
                                    update "Accounts"
                                    set "LedgerBalance" = "LedgerBalance" - old_amount + new_amount,
                                        "AvailableBalance" = "AvailableBalance" - old_amount + new_amount,
                                        "UpdatedBy" = new."UpdatedBy",
                                        "UpdatedAt" = new."UpdatedAt"
                                    where "AccountId" = new."AccountId";
                                end if;
                            end if;

                            -- Soft delete
                            if (old."IsDeleted" = false and new."IsDeleted" = true) then
                                if (old."TransactionStatusId" = 1) then
                                    update "Accounts"
                                    set "PendingBalance" = "PendingBalance" - old_amount,
                                        "UpdatedBy" = new."DeletedBy",
                                        "UpdatedAt" = new."DeletedAt"
                                    where "AccountId" = old."AccountId";
                                elsif (old."TransactionStatusId" = 2) then
                                    update "Accounts"
                                    set "LedgerBalance" = "LedgerBalance" - old_amount,
                                        "AvailableBalance" = "AvailableBalance" - old_amount,
                                        "UpdatedBy" = new."DeletedBy",
                                        "UpdatedAt" = new."DeletedAt"
                                    where "AccountId" = old."AccountId";
                                end if;
                            end if;

                            -- Restore from soft delete
                            if (old."IsDeleted" = true and new."IsDeleted" = false) then
                                if (new."TransactionStatusId" = 1) then
                                    update "Accounts"
                                    set "PendingBalance" = "PendingBalance" + new_amount,
                                        "UpdatedAt" = now() at time zone 'utc'
                                    where "AccountId" = new."AccountId";
                                elsif (new."TransactionStatusId" = 2) then
                                    update "Accounts"
                                    set "LedgerBalance" = "LedgerBalance" + new_amount,
                                        "AvailableBalance" = "AvailableBalance" + new_amount,
                                        "UpdatedAt" = now() at time zone 'utc'
                                    where "AccountId" = new."AccountId";
                                end if;
                            end if;

                            return new;
                        end if;

                        -- DELETE
                        if (TG_OP = 'DELETE') then
                            if (old."IsDeleted" = false) then
                                if (old."TransactionStatusId" = 1) then
                                    update "Accounts"
                                    set "PendingBalance" = "PendingBalance" - old_amount,
                                        "UpdatedBy" = old."UpdatedBy",
                                        "UpdatedAt" = old."UpdatedAt"
                                    where "AccountId" = old."AccountId";
                                elsif (old."TransactionStatusId" = 2) then
                                    update "Accounts"
                                    set "LedgerBalance" = "LedgerBalance" - old_amount,
                                        "AvailableBalance" = "AvailableBalance" - old_amount,
                                        "UpdatedAt" = now() at time zone 'utc'
                                    where "AccountId" = old."AccountId";
                                end if;
                            end if;
                            return old;
                        end if;

                        return null;
                    end;
                    $$ language plpgsql;
                
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250908152949_AccountBalanceTrigger') THEN

                    drop trigger if exists tr_update_account_balance on "Transactions";
                    create trigger tr_update_account_balance
                    after insert or update or delete
                    on "Transactions"
                    for each row
                    execute function update_account_balance();
                
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250908152949_AccountBalanceTrigger') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20250908152949_AccountBalanceTrigger', '9.0.8');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250908153028_HoldBalanceTrigger') THEN

                create or replace function update_hold_balance()
                returns trigger as
                $$
                begin
                    -- INSERT
                    if (TG_OP = 'INSERT') then
                        if (new."IsDeleted" = false and new."HoldStatusId" = 1) then
                            update "Accounts"
                            set "HoldBalance" = "HoldBalance" + new."Amount",
                                "AvailableBalance" = "LedgerBalance" - ("HoldBalance" + new."Amount"),
                                "UpdatedBy" = new."UpdatedBy",
                                "UpdatedAt" = new."UpdatedAt"
                            where "AccountId" = new."AccountId"; 
                        end if;
                        return new;
                    end if;

                    -- UPDATE
                    if (TG_OP = 'UPDATE') then
                        -- Account or Amount changed
                        if (old."AccountId" <> new."AccountId" or old."Amount" <> new."Amount") then
                            -- remove old hold from old account
                            if (old."HoldStatusId" = 1 and old."IsDeleted" = false) then
                                update "Accounts"
                                set "HoldBalance" = "HoldBalance" - old."Amount",
                                    "AvailableBalance" = "LedgerBalance" - ("HoldBalance" - old."Amount"),
                                    "UpdatedBy" = new."UpdatedBy",
                                    "UpdatedAt" = new."UpdatedAt"
                                where "AccountId" = old."AccountId"; 
                            end if;

                            -- add new hold to new account
                            if (new."HoldStatusId" = 1 and new."IsDeleted" = false) then
                                update "Accounts"
                                set "HoldBalance" = "HoldBalance" + new."Amount",
                                    "AvailableBalance" = "LedgerBalance" - ("HoldBalance" + new."Amount"),
                                    "UpdatedBy" = new."UpdatedBy",
                                    "UpdatedAt" = new."UpdatedAt"
                                where "AccountId" = new."AccountId"; 
                            end if;
                        end if;

                        -- Status change: Active -> Settled/Released/Expired
                        if (old."HoldStatusId" = 1 and new."HoldStatusId" in (3, 2, 4)) then
                            update "Accounts"
                            set "HoldBalance" = "HoldBalance" - old."Amount",
                                "AvailableBalance" = "LedgerBalance" - ("HoldBalance" - old."Amount"),
                                "UpdatedBy" = new."UpdatedBy",
                                "UpdatedAt" = new."UpdatedAt"
                            where "AccountId" = old."AccountId"; 
                        end if;

                        -- Soft delete
                        if (old."HoldStatusId" = 1 and old."IsDeleted" = false and new."IsDeleted" = true) then
                            update "Accounts"
                            set "HoldBalance" = "HoldBalance" - old."Amount",
                                "AvailableBalance" = "LedgerBalance" - ("HoldBalance" - old."Amount"),
                                "UpdatedBy" = new."DeletedBy",
                                "UpdatedAt" = new."DeletedAt"
                            where "AccountId" = old."AccountId"; 
                        end if;

                        -- Restore from soft delete
                        if (new."HoldStatusId" = 1 and old."IsDeleted" = true and new."IsDeleted" = false) then
                            update "Accounts"
                            set "HoldBalance" = "HoldBalance" + new."Amount",
                                "AvailableBalance" = "LedgerBalance" - ("HoldBalance" + new."Amount"),
                                "UpdatedAt" = new."UpdatedAt"
                            where "AccountId" = new."AccountId"; 
                        end if;

                        return new;
                    end if;

                    -- DELETE
                    if (TG_OP = 'DELETE') then
                        if (old."IsDeleted" = false and old."HoldStatusId" = 1) then
                            update "Accounts"
                            set "HoldBalance" = "HoldBalance" - old."Amount",
                                "AvailableBalance" = "LedgerBalance" - ("HoldBalance" - old."Amount"),
                                "UpdatedAt" = now() at time zone 'utc'
                            where "AccountId" = old."AccountId"; 
                        end if;
                        return old;
                    end if;

                    return null;
                end;
                $$ language plpgsql;
            
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250908153028_HoldBalanceTrigger') THEN

                create trigger tr_update_hold_balance
                after insert or update or delete
                on "Holds"
                for each row
                execute function update_hold_balance();
            
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250908153028_HoldBalanceTrigger') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20250908153028_HoldBalanceTrigger', '9.0.8');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250908153049_AccountBalanceValidationTrigger') THEN

                    create or replace function validate_account_balance()
                    returns trigger as
                    $$
                    declare
                        projected_available_balance numeric;
                        min_required_balance numeric;
                        acc_status int;
                        available_balance numeric;
                        ledger_balance numeric;
                        pending_balance numeric;
                        hold_balance numeric;
                        total_balance_before numeric;
                        total_balance_after numeric;
                        draft_effect numeric := 0;
                    begin
                        -- Always load balances
                        select "AvailableBalance",
                               "MinimumRequiredBalance",
                               "AccountStatusId",
                               "LedgerBalance",
                               "PendingBalance",
                               "HoldBalance"
                        into available_balance, min_required_balance, acc_status, ledger_balance, pending_balance, hold_balance
                        from "Accounts"
                        where "AccountId" = new."AccountId";

                        -- Projected balance for AvailableBalance (only matters for Posted)
                        projected_available_balance := available_balance +
                                            (case
                                                 when new."TransactionDirectionId" = 1 then new."Amount"
                                                 when new."TransactionDirectionId" = 2 then -new."Amount"
                                                 else 0
                                             end);

                        -- Minimum balance check only for Posted transactions
                        if (new."TransactionStatusId" = 2) then
                            if (projected_available_balance < min_required_balance) then
                                raise exception 'Transaction would reduce AvailableBalance below MinimumRequiredBalance. MinimumRequiredBalance=%, Projected AvailableBalance=%',
                                    min_required_balance, projected_available_balance;
                            end if;
                        end if;

                        -- PendingClosure convergence check for *all* transactions
                        if (acc_status = 8) then
                            -- net exposure before
                            total_balance_before := abs(available_balance + ledger_balance + pending_balance + hold_balance);

                            -- calculate effect depending on status
                            if (new."TransactionStatusId" = 2) then
                                -- Posted affects AvailableBalance
                                total_balance_after := abs(projected_available_balance + ledger_balance + pending_balance + hold_balance);
                            else
                                -- Draft affects PendingBalance
                                draft_effect := case
                                                    when new."TransactionDirectionId" = 1 then new."Amount"
                                                    when new."TransactionDirectionId" = 2 then -new."Amount"
                                                    else 0
                                                end;

                                total_balance_after := abs(available_balance + ledger_balance + (pending_balance + draft_effect) + hold_balance);
                            end if;

                            if (total_balance_after > total_balance_before) then
                                raise exception 'AccountStatus is PendingClosure, operation has increased balance exposure (before=%, after=%)',
                                    total_balance_before, total_balance_after;
                            end if;

                            -- Auto-close if all balances zero after this transaction (only enforce on Posted)
                            if (new."TransactionStatusId" = 2 and total_balance_after = 0) then
                                update "Accounts"
                                set "AccountStatusId" = 3
                                where "AccountId" = new."AccountId";
                            end if;
                        end if;

                        return new;
                    end;
                    $$ language plpgsql;
                
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250908153049_AccountBalanceValidationTrigger') THEN

                    create trigger tr_validate_account_balance
                    before insert or update
                    on "Transactions"
                    for each row
                    execute function validate_account_balance();
                
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250908153049_AccountBalanceValidationTrigger') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20250908153049_AccountBalanceValidationTrigger', '9.0.8');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250908153114_AccountValidationTrigger') THEN

                    create or replace function validate_min_balance_update()
                    returns trigger as
                    $$
                    begin
                        if (new."MinimumRequiredBalance" > old."MinimumRequiredBalance") then
                            if (new."AvailableBalance" < new."MinimumRequiredBalance") then
                                raise exception 'Cannot increase MinimumRequiredBalance above AvailableBalance: %',
                                    new."AvailableBalance";
                            end if;
                        end if;
                        return new;
                    end;
                    $$ language plpgsql;
                
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250908153114_AccountValidationTrigger') THEN

                    create trigger tr_validate_min_balance_update
                    before update of "MinimumRequiredBalance"
                    on "Accounts"
                    for each row
                    execute function validate_min_balance_update();
                
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250908153114_AccountValidationTrigger') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20250908153114_AccountValidationTrigger', '9.0.8');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250908153526_HoldBalanceValidationTrigger') THEN

                    create or replace function validate_hold_balance()
                    returns trigger as
                    $$
                    declare
                        projected_available_balance numeric;
                        min_required_balance numeric;
                        acc_status int;
                        available_balance numeric;
                        ledger_balance numeric;
                        pending_balance numeric;
                        hold_balance numeric;
                        total_balance_before numeric;
                        total_balance_after numeric;
                    begin
                        -- Only consider active holds that are not deleted
                        if (new."HoldStatusId" = 1 and new."IsDeleted" = false) then
                            select "AvailableBalance",
                                   "MinimumRequiredBalance",
                                   "AccountStatusId",
                                   "LedgerBalance",
                                   "PendingBalance",
                                   "HoldBalance"
                            into available_balance, min_required_balance, acc_status, ledger_balance, pending_balance, hold_balance
                            from "Accounts"
                            where "AccountId" = new."AccountId";

                            -- Basic projected balance check
                            projected_available_balance := available_balance - new."Amount";

                            if (projected_available_balance < min_required_balance) then
                                raise exception 'AvailableBalance would be reduced below the configured MinimumRequiredBalance. MinimumRequiredBalance=%, Projected AvailableBalance=%',
                                    min_required_balance, projected_available_balance;
                            end if;

                            -- PendingClosure convergence rule
                            if (acc_status = 8) then
                                -- net exposure before
                                total_balance_before := abs(available_balance + ledger_balance + pending_balance + hold_balance);

                                -- net exposure after adding the hold
                                total_balance_after := abs(available_balance + ledger_balance + pending_balance + (hold_balance + new."Amount"));

                                if (total_balance_after > total_balance_before) then
                                    raise exception 'AccountStatus is PendingClosure, hold operation has increased balance exposure (before=%, after=%)',
                                        total_balance_before, total_balance_after;
                                end if;

                                -- Auto-close if exposure reaches zero after this hold operation
                                if (total_balance_after = 0) then
                                    update "Accounts"
                                    set "AccountStatusId" = 3
                                    where "AccountId" = new."AccountId";    
                                end if;
                            end if;
                        end if;

                        return new;
                    end;
                    $$ language plpgsql;
                
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250908153526_HoldBalanceValidationTrigger') THEN

                    create trigger tr_validate_hold_balance
                    before insert or update
                    on "Holds"
                    for each row
                    execute function validate_hold_balance();
                
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250908153526_HoldBalanceValidationTrigger') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20250908153526_HoldBalanceValidationTrigger', '9.0.8');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250909183237_AddTransactionSource') THEN
    INSERT INTO "TransactionTypes" ("TransactionTypeId", "Name")
    VALUES (3, 'Transfer');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250909183237_AddTransactionSource') THEN
    PERFORM setval(
        pg_get_serial_sequence('"TransactionTypes"', 'TransactionTypeId'),
        GREATEST(
            (SELECT MAX("TransactionTypeId") FROM "TransactionTypes") + 1,
            nextval(pg_get_serial_sequence('"TransactionTypes"', 'TransactionTypeId'))),
        false);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250909183237_AddTransactionSource') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20250909183237_AddTransactionSource', '9.0.8');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250911135145_AccountHistoryTable') THEN
    CREATE TABLE "HistoryTypes" (
        "HistoryTypeId" integer GENERATED BY DEFAULT AS IDENTITY,
        "Name" text NOT NULL,
        CONSTRAINT "PK_HistoryTypes" PRIMARY KEY ("HistoryTypeId")
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250911135145_AccountHistoryTable') THEN
    CREATE TABLE "AccountHistory" (
        "AccountHistoryId" uuid NOT NULL,
        "HistoryTypeId" integer NOT NULL,
        "Timestamp" timestamp with time zone NOT NULL,
        "AccountId" uuid NOT NULL,
        "AccountName" text NOT NULL,
        "CurrencyCode" text NOT NULL,
        "LedgerBalance" numeric NOT NULL,
        "AvailableBalance" numeric NOT NULL,
        "PendingBalance" numeric NOT NULL,
        "HoldBalance" numeric NOT NULL,
        "MinimumRequiredBalance" numeric NOT NULL,
        "AccountTypeId" integer NOT NULL,
        "AccountStatusId" integer NOT NULL,
        "Metadata" jsonb,
        "ParentAccountId" uuid,
        "IsDeleted" boolean NOT NULL,
        "DeletedAt" timestamp with time zone,
        "DeletedBy" text,
        "CreatedAt" timestamp with time zone NOT NULL,
        "CreatedBy" text NOT NULL,
        "UpdatedAt" timestamp with time zone NOT NULL,
        "UpdatedBy" text NOT NULL,
        CONSTRAINT "PK_AccountHistory" PRIMARY KEY ("AccountHistoryId"),
        CONSTRAINT "FK_AccountHistory_AccountStatuses_AccountStatusId" FOREIGN KEY ("AccountStatusId") REFERENCES "AccountStatuses" ("AccountStatusId") ON DELETE CASCADE,
        CONSTRAINT "FK_AccountHistory_AccountTypes_AccountTypeId" FOREIGN KEY ("AccountTypeId") REFERENCES "AccountTypes" ("AccountTypeId") ON DELETE CASCADE,
        CONSTRAINT "FK_AccountHistory_Accounts_ParentAccountId" FOREIGN KEY ("ParentAccountId") REFERENCES "Accounts" ("AccountId") ON DELETE SET NULL,
        CONSTRAINT "FK_AccountHistory_HistoryTypes_HistoryTypeId" FOREIGN KEY ("HistoryTypeId") REFERENCES "HistoryTypes" ("HistoryTypeId") ON DELETE CASCADE
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250911135145_AccountHistoryTable') THEN
    INSERT INTO "HistoryTypes" ("HistoryTypeId", "Name")
    VALUES (1, 'Insert');
    INSERT INTO "HistoryTypes" ("HistoryTypeId", "Name")
    VALUES (2, 'Modify');
    INSERT INTO "HistoryTypes" ("HistoryTypeId", "Name")
    VALUES (3, 'Delete');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250911135145_AccountHistoryTable') THEN
    CREATE INDEX "IX_AccountHistory_AccountId" ON "AccountHistory" ("AccountId");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250911135145_AccountHistoryTable') THEN
    CREATE INDEX "IX_AccountHistory_AccountStatusId" ON "AccountHistory" ("AccountStatusId");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250911135145_AccountHistoryTable') THEN
    CREATE INDEX "IX_AccountHistory_AccountTypeId" ON "AccountHistory" ("AccountTypeId");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250911135145_AccountHistoryTable') THEN
    CREATE INDEX "IX_AccountHistory_HistoryTypeId" ON "AccountHistory" ("HistoryTypeId");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250911135145_AccountHistoryTable') THEN
    CREATE INDEX "IX_AccountHistory_ParentAccountId" ON "AccountHistory" ("ParentAccountId");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250911135145_AccountHistoryTable') THEN
    PERFORM setval(
        pg_get_serial_sequence('"HistoryTypes"', 'HistoryTypeId'),
        GREATEST(
            (SELECT MAX("HistoryTypeId") FROM "HistoryTypes") + 1,
            nextval(pg_get_serial_sequence('"HistoryTypes"', 'HistoryTypeId'))),
        false);
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250911135145_AccountHistoryTable') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20250911135145_AccountHistoryTable', '9.0.8');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250911135257_AccountHistoryTrigger') THEN

                    create or replace function account_history()
                    returns trigger as
                    $$
                    begin
                        if TG_OP = 'INSERT' then
                            
                    insert into "AccountHistory" (
                        "AccountHistoryId",
    "HistoryTypeId",
    "Timestamp",
    "AccountId",
    "AccountName",
    "CurrencyCode",
    "LedgerBalance",
    "AvailableBalance",
    "PendingBalance",
    "HoldBalance",
    "MinimumRequiredBalance",
    "AccountTypeId",
    "AccountStatusId",
    "Metadata",
    "ParentAccountId",
    "IsDeleted",
    "DeletedAt",
    "DeletedBy",
    "CreatedAt",
    "CreatedBy",
    "UpdatedAt",
    "UpdatedBy"
                    )
                    values (
                        gen_random_uuid(),
    1,
    (now() at time zone 'utc'),
    new."AccountId",
    new."AccountName",
    new."CurrencyCode",
    new."LedgerBalance",
    new."AvailableBalance",
    new."PendingBalance",
    new."HoldBalance",
    new."MinimumRequiredBalance",
    new."AccountTypeId",
    new."AccountStatusId",
    new."Metadata",
    new."ParentAccountId",
    new."IsDeleted",
    new."DeletedAt",
    new."DeletedBy",
    new."CreatedAt",
    new."CreatedBy",
    new."UpdatedAt",
    new."UpdatedBy"
                    );
                            return new;

                        elsif TG_OP = 'UPDATE' then
                            
                    insert into "AccountHistory" (
                        "AccountHistoryId",
    "HistoryTypeId",
    "Timestamp",
    "AccountId",
    "AccountName",
    "CurrencyCode",
    "LedgerBalance",
    "AvailableBalance",
    "PendingBalance",
    "HoldBalance",
    "MinimumRequiredBalance",
    "AccountTypeId",
    "AccountStatusId",
    "Metadata",
    "ParentAccountId",
    "IsDeleted",
    "DeletedAt",
    "DeletedBy",
    "CreatedAt",
    "CreatedBy",
    "UpdatedAt",
    "UpdatedBy"
                    )
                    values (
                        gen_random_uuid(),
    2,
    (now() at time zone 'utc'),
    new."AccountId",
    new."AccountName",
    new."CurrencyCode",
    new."LedgerBalance",
    new."AvailableBalance",
    new."PendingBalance",
    new."HoldBalance",
    new."MinimumRequiredBalance",
    new."AccountTypeId",
    new."AccountStatusId",
    new."Metadata",
    new."ParentAccountId",
    new."IsDeleted",
    new."DeletedAt",
    new."DeletedBy",
    new."CreatedAt",
    new."CreatedBy",
    new."UpdatedAt",
    new."UpdatedBy"
                    );
                            return new;

                        elsif TG_OP = 'DELETE' then
                            
                    insert into "AccountHistory" (
                        "AccountHistoryId",
    "HistoryTypeId",
    "Timestamp",
    "AccountId",
    "AccountName",
    "CurrencyCode",
    "LedgerBalance",
    "AvailableBalance",
    "PendingBalance",
    "HoldBalance",
    "MinimumRequiredBalance",
    "AccountTypeId",
    "AccountStatusId",
    "Metadata",
    "ParentAccountId",
    "IsDeleted",
    "DeletedAt",
    "DeletedBy",
    "CreatedAt",
    "CreatedBy",
    "UpdatedAt",
    "UpdatedBy"
                    )
                    values (
                        gen_random_uuid(),
    3,
    (now() at time zone 'utc'),
    old."AccountId",
    old."AccountName",
    old."CurrencyCode",
    old."LedgerBalance",
    old."AvailableBalance",
    old."PendingBalance",
    old."HoldBalance",
    old."MinimumRequiredBalance",
    old."AccountTypeId",
    old."AccountStatusId",
    old."Metadata",
    old."ParentAccountId",
    old."IsDeleted",
    old."DeletedAt",
    old."DeletedBy",
    old."CreatedAt",
    old."CreatedBy",
    old."UpdatedAt",
    old."UpdatedBy"
                    );
                            return old;
                        end if;
                    end;
                    $$ language plpgsql;
                
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250911135257_AccountHistoryTrigger') THEN

                    create trigger tr_account_history
                    after insert or update or delete
                    on "Accounts"
                    for each row
                    execute function account_history();
                
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250911135257_AccountHistoryTrigger') THEN

                    insert into "AccountHistory" (
                        "AccountHistoryId",
    "HistoryTypeId",
    "Timestamp",
    "AccountId",
    "AccountName",
    "CurrencyCode",
    "LedgerBalance",
    "AvailableBalance",
    "PendingBalance",
    "HoldBalance",
    "MinimumRequiredBalance",
    "AccountTypeId",
    "AccountStatusId",
    "Metadata",
    "ParentAccountId",
    "IsDeleted",
    "DeletedAt",
    "DeletedBy",
    "CreatedAt",
    "CreatedBy",
    "UpdatedAt",
    "UpdatedBy"
                    )
                    select
                        gen_random_uuid(),
    1,
    (now() at time zone 'utc'),
    a."AccountId",
    a."AccountName",
    a."CurrencyCode",
    a."LedgerBalance",
    a."AvailableBalance",
    a."PendingBalance",
    a."HoldBalance",
    a."MinimumRequiredBalance",
    a."AccountTypeId",
    a."AccountStatusId",
    a."Metadata",
    a."ParentAccountId",
    a."IsDeleted",
    a."DeletedAt",
    a."DeletedBy",
    a."CreatedAt",
    a."CreatedBy",
    a."UpdatedAt",
    a."UpdatedBy"
                    from "Accounts" a;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250911135257_AccountHistoryTrigger') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20250911135257_AccountHistoryTrigger', '9.0.8');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250911140152_TransactionHistoryTable') THEN
    CREATE TABLE "TransactionHistory" (
        "TransactionHistoryId" uuid NOT NULL,
        "HistoryTypeId" integer NOT NULL,
        "Timestamp" timestamp with time zone NOT NULL,
        "TransactionId" uuid NOT NULL,
        "AccountId" uuid NOT NULL,
        "Amount" numeric NOT NULL,
        "CurrencyCode" text NOT NULL,
        "TransactionDirectionId" integer NOT NULL,
        "PostedDate" date,
        "IdempotencyKey" uuid NOT NULL,
        "TransactionTypeId" integer NOT NULL,
        "TransactionStatusId" integer NOT NULL,
        "TransactionSourceId" integer NOT NULL,
        "Description" text,
        "Reference" text,
        "IsDeleted" boolean NOT NULL,
        "DeletedAt" timestamp with time zone,
        "DeletedBy" text,
        "CreatedAt" timestamp with time zone NOT NULL,
        "CreatedBy" text NOT NULL,
        "UpdatedAt" timestamp with time zone NOT NULL,
        "UpdatedBy" text NOT NULL,
        CONSTRAINT "PK_TransactionHistory" PRIMARY KEY ("TransactionHistoryId"),
        CONSTRAINT "FK_TransactionHistory_Accounts_AccountId" FOREIGN KEY ("AccountId") REFERENCES "Accounts" ("AccountId") ON DELETE CASCADE,
        CONSTRAINT "FK_TransactionHistory_HistoryTypes_HistoryTypeId" FOREIGN KEY ("HistoryTypeId") REFERENCES "HistoryTypes" ("HistoryTypeId") ON DELETE CASCADE,
        CONSTRAINT "FK_TransactionHistory_TransactionDirections_TransactionDirecti~" FOREIGN KEY ("TransactionDirectionId") REFERENCES "TransactionDirections" ("TransactionDirectionId") ON DELETE CASCADE,
        CONSTRAINT "FK_TransactionHistory_TransactionSources_TransactionSourceId" FOREIGN KEY ("TransactionSourceId") REFERENCES "TransactionSources" ("TransactionSourceId") ON DELETE CASCADE,
        CONSTRAINT "FK_TransactionHistory_TransactionStatuses_TransactionStatusId" FOREIGN KEY ("TransactionStatusId") REFERENCES "TransactionStatuses" ("TransactionStatusId") ON DELETE CASCADE,
        CONSTRAINT "FK_TransactionHistory_TransactionTypes_TransactionTypeId" FOREIGN KEY ("TransactionTypeId") REFERENCES "TransactionTypes" ("TransactionTypeId") ON DELETE CASCADE
    );
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250911140152_TransactionHistoryTable') THEN
    CREATE INDEX "IX_TransactionHistory_AccountId" ON "TransactionHistory" ("AccountId");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250911140152_TransactionHistoryTable') THEN
    CREATE INDEX "IX_TransactionHistory_HistoryTypeId" ON "TransactionHistory" ("HistoryTypeId");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250911140152_TransactionHistoryTable') THEN
    CREATE INDEX "IX_TransactionHistory_TransactionDirectionId" ON "TransactionHistory" ("TransactionDirectionId");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250911140152_TransactionHistoryTable') THEN
    CREATE INDEX "IX_TransactionHistory_TransactionId" ON "TransactionHistory" ("TransactionId");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250911140152_TransactionHistoryTable') THEN
    CREATE INDEX "IX_TransactionHistory_TransactionSourceId" ON "TransactionHistory" ("TransactionSourceId");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250911140152_TransactionHistoryTable') THEN
    CREATE INDEX "IX_TransactionHistory_TransactionStatusId" ON "TransactionHistory" ("TransactionStatusId");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250911140152_TransactionHistoryTable') THEN
    CREATE INDEX "IX_TransactionHistory_TransactionTypeId" ON "TransactionHistory" ("TransactionTypeId");
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250911140152_TransactionHistoryTable') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20250911140152_TransactionHistoryTable', '9.0.8');
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250911140436_TransactionHistoryTrigger') THEN

                    create or replace function transaction_history()
                    returns trigger as
                    $$
                    begin
                        if TG_OP = 'INSERT' then
                            
                    insert into "TransactionHistory" (
                        "TransactionHistoryId",
    "HistoryTypeId",
    "Timestamp",
    "TransactionId",
    "AccountId",
    "Amount",
    "CurrencyCode",
    "TransactionDirectionId",
    "PostedDate",
    "IdempotencyKey",
    "TransactionTypeId",
    "TransactionStatusId",
    "TransactionSourceId",
    "Description",
    "Reference",
    "IsDeleted",
    "DeletedAt",
    "DeletedBy",
    "CreatedAt",
    "CreatedBy",
    "UpdatedAt",
    "UpdatedBy"
                    )
                    values (
                        gen_random_uuid(),
    1,
    (now() at time zone 'utc'),
    new."TransactionId",
    new."AccountId",
    new."Amount",
    new."CurrencyCode",
    new."TransactionDirectionId",
    new."PostedDate",
    new."IdempotencyKey",
    new."TransactionTypeId",
    new."TransactionStatusId",
    new."TransactionSourceId",
    new."Description",
    new."Reference",
    new."IsDeleted",
    new."DeletedAt",
    new."DeletedBy",
    new."CreatedAt",
    new."CreatedBy",
    new."UpdatedAt",
    new."UpdatedBy"
                    );
                            return new;

                        elsif TG_OP = 'UPDATE' then
                            
                    insert into "TransactionHistory" (
                        "TransactionHistoryId",
    "HistoryTypeId",
    "Timestamp",
    "TransactionId",
    "AccountId",
    "Amount",
    "CurrencyCode",
    "TransactionDirectionId",
    "PostedDate",
    "IdempotencyKey",
    "TransactionTypeId",
    "TransactionStatusId",
    "TransactionSourceId",
    "Description",
    "Reference",
    "IsDeleted",
    "DeletedAt",
    "DeletedBy",
    "CreatedAt",
    "CreatedBy",
    "UpdatedAt",
    "UpdatedBy"
                    )
                    values (
                        gen_random_uuid(),
    2,
    (now() at time zone 'utc'),
    new."TransactionId",
    new."AccountId",
    new."Amount",
    new."CurrencyCode",
    new."TransactionDirectionId",
    new."PostedDate",
    new."IdempotencyKey",
    new."TransactionTypeId",
    new."TransactionStatusId",
    new."TransactionSourceId",
    new."Description",
    new."Reference",
    new."IsDeleted",
    new."DeletedAt",
    new."DeletedBy",
    new."CreatedAt",
    new."CreatedBy",
    new."UpdatedAt",
    new."UpdatedBy"
                    );
                            return new;

                        elsif TG_OP = 'DELETE' then
                            
                    insert into "TransactionHistory" (
                        "TransactionHistoryId",
    "HistoryTypeId",
    "Timestamp",
    "TransactionId",
    "AccountId",
    "Amount",
    "CurrencyCode",
    "TransactionDirectionId",
    "PostedDate",
    "IdempotencyKey",
    "TransactionTypeId",
    "TransactionStatusId",
    "TransactionSourceId",
    "Description",
    "Reference",
    "IsDeleted",
    "DeletedAt",
    "DeletedBy",
    "CreatedAt",
    "CreatedBy",
    "UpdatedAt",
    "UpdatedBy"
                    )
                    values (
                        gen_random_uuid(),
    3,
    (now() at time zone 'utc'),
    old."TransactionId",
    old."AccountId",
    old."Amount",
    old."CurrencyCode",
    old."TransactionDirectionId",
    old."PostedDate",
    old."IdempotencyKey",
    old."TransactionTypeId",
    old."TransactionStatusId",
    old."TransactionSourceId",
    old."Description",
    old."Reference",
    old."IsDeleted",
    old."DeletedAt",
    old."DeletedBy",
    old."CreatedAt",
    old."CreatedBy",
    old."UpdatedAt",
    old."UpdatedBy"
                    );
                            return old;
                        end if;
                    end;
                    $$ language plpgsql;
                
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250911140436_TransactionHistoryTrigger') THEN

                    create trigger tr_transaction_history
                    after insert or update or delete
                    on "Transactions"
                    for each row
                    execute function transaction_history();
                
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250911140436_TransactionHistoryTrigger') THEN

                    insert into "TransactionHistory" (
                        "TransactionHistoryId",
    "HistoryTypeId",
    "Timestamp",
    "TransactionId",
    "AccountId",
    "Amount",
    "CurrencyCode",
    "TransactionDirectionId",
    "PostedDate",
    "IdempotencyKey",
    "TransactionTypeId",
    "TransactionStatusId",
    "TransactionSourceId",
    "Description",
    "Reference",
    "IsDeleted",
    "DeletedAt",
    "DeletedBy",
    "CreatedAt",
    "CreatedBy",
    "UpdatedAt",
    "UpdatedBy"
                    )
                    select
                        gen_random_uuid(),
    1,
    (now() at time zone 'utc'),
    t."TransactionId",
    t."AccountId",
    t."Amount",
    t."CurrencyCode",
    t."TransactionDirectionId",
    t."PostedDate",
    t."IdempotencyKey",
    t."TransactionTypeId",
    t."TransactionStatusId",
    t."TransactionSourceId",
    t."Description",
    t."Reference",
    t."IsDeleted",
    t."DeletedAt",
    t."DeletedBy",
    t."CreatedAt",
    t."CreatedBy",
    t."UpdatedAt",
    t."UpdatedBy"
                    from "Transactions" t;
    END IF;
END $EF$;

DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM "__EFMigrationsHistory" WHERE "MigrationId" = '20250911140436_TransactionHistoryTrigger') THEN
    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
    VALUES ('20250911140436_TransactionHistoryTrigger', '9.0.8');
    END IF;
END $EF$;
COMMIT;

